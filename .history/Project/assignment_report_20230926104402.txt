
Individual report for the COMP1730/6730 project assignment S2 2022
-------------------------------------------------------------------

Question 1: Write your name and ANU ID

# My ANU ID: u7100771
# My NAME: Guangming Zeng

I declare that this submission is my own work
[ref: https://www.anu.edu.au/students/academic-skills/academic-integrity ]
-------------------------------------------------------------------

Question 2: Select a piece of code in your assignment solution that
you have written, and explain:    
    T = 1
    last_over = None
    last_not_over = None
    while(True):
        # obtain a “good” configuration at time T
        # Also for cache control. I don't want to repeat the calculation. 
        # If cache is enough, get from cache. If not, generate it and add to cache.
        if T <= T_cal_max:
            position_forward_T = position_forward_T_cal[:T, :][-1]
        else:
            position_forward_T_x2, position_current, velocity_current, acceleration_current = forward_simulation_speedup_extend(position_current, velocity_current, acceleration_current, T  - T_cal_max, 1, data)
            position_forward_T_cal = np.vstack((position_forward_T_cal, position_forward_T_x2))
            position_forward_T = position_forward_T_cal[:T, :][-1]
            T_cal_max = T

        # another “approximate” configuration
        position_forward_1 = forward_simulation(path_to_file, T, 1)[-1]

        # compute the error between the two configurations using the Euclidean distance
        error = 0
        for i in range(0, len(position_forward_T), 2):
            error += np.sqrt((position_forward_T[i] - position_forward_1[i])**2 + (position_forward_T[i+1] - position_forward_1[i+1])**2)

        # apply binary search algorithm to find the largest T such that the error is less than epsilon
        if error <= epsilon:
            last_not_over = T
            if last_over is None:
                T = T * 2
            elif last_over - last_not_over <= 1:
                return last_not_over
            else:
                T = int((T + last_over) / 2)
        else:
            last_over = T
            T = int((T + last_not_over) / 2)

(a) What does this piece of code do?
This piece of code is to use binary search algorithm to find the largest T such that the error is less than epsilon. 
It evaluates T by comparing the error between the two configurations using the Euclidean distance. If the error is less than epsilon, it means that the configuration is acceptable. Otherwise, it is not acceptable. 
We should find the largest T that still meet the requirement. However, calculation of T is time-consuming. 
The code introduce a smart strategy to find optimal T while avoiding too much calculation. 

We assume that T is integer and T is greater than 0. We could always calculate the error given T.
T could start at minimum value 1. But we don't know the maximum value.

(b) How does it work?
- Calculate T
It obtains a “good” / "approximate" configuration at time T by stimulating the planetary system at T points / 2 points. 
Then with the Euclidean distance between them, we could calculate cost of T.

- Find T
Calculation of cost of T is time-consuming. Here are some strategies used in this code to avoid too much calculation.
    1. T which is higher has covered all the calculation than the lower T. We could store cache from higher T to avoid repeat calculation in lower T.
    2. We narrow the boundaries of T on both sides. T which is out of the boundaries will not be used to calculate.
        2.1 The maximum bundary
            introduce last_over to record the maximum bundary which is already over epsilon. (T, not acceptable)
            We could enlarge T by double it and let it become not acceptable, trying to find a maximum bundary as soon as possible.
        2.2 The minimum bundary
            And, every T which is not over epsilon could be the last_not_over which is the minimum bundary. (T, acceptable) 
            The minimum bundary should be as large as possible. We could record this when enlarge T if this T is still acceptable.
    3. An effetive search algorithm.
        Once we find the minimum boundary and maximum boundary, apply binary search algorithm to find the largest T that meet the requirement.

(c) What other possible ways did you consider to implement this functionality, and why did you choose the one you did?

    Given minimum boundary and maximum boundary, we search T from their average value and then narrow the boundaries on both sides.
The time complexity is O(log(n)).
    It is much faster than just adding 1 continuously in each loop starting from minimum boundary OR, continuously subtract 1 from the maximum boundary.
The time complexity is O(n).
    Linear search, interpolation search, and hash table search can also be used for searching, but from the perspective of average time complexity, binary search is still considered one of the optimal algorithms.


-------------------------------------------------------------------
